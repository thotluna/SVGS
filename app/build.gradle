plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "org.jlleitschuh.gradle.ktlint"
    id "kotlin-kapt"
    id "dagger.hilt.android.plugin"
    id 'com.google.gms.google-services'
    id 'kover'
//    id 'jacoco'
}

//
//jacoco {
//    toolVersion = '0.8.8'
//}

//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
//
//    reports {
////        xml.enabled(true)
//        html.enabled(true)
//    }
//
//    def fileFilter = ['**/R.class',
//                      '**/R$*.class',
//                      '**/BuildConfig.*',
//                      '**/Manifest*.*',
//                      '**/*Test*.*',
//                      'android/**/*.*',
//                      "*_*Factory.java",
//                      "*_ComponentTreeDeps.java",
//                      "*_Factory.java",
//                      "*_GeneratedInjector.java",
//                      "*_HiltComponents.java",
//                      "*_HiltModules.java",
//                      "*_HiltModules_BindsModule.java",
//                      "*_HiltModules_KeyModule.java",
//                      "*_MembersInjector.java",
//                      "*_ProvideFactory.java",
//                      "*_SingletonC.java",
//                      "*_TestComponentDataSupplier.java",
//                      "Hilt_*.java",
//                      "_test_*.java"]
//    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
//    def mainSrc = "$project.projectDir/src/main/kotlin"
//
//    sourceDirectories.from files([mainSrc])
//    classDirectories.from files([debugTree])
//    executionData.from fileTree(dir: project.buildDir, includes: [
//            'jacoco/testDebugUnitTest.exec'
////            , 'outputs/code-coverage/connected/*coverage.ec'
//    ])
//    doLast {
//        println "Wrote HTML coverage report to ${reports.html.outputLocation}/index.html"
//    }
//}

//tasks.withType(Test) {
//    jacoco.includeNoLocationClasses = true
//    jacoco.excludes = ['jdk.internal.*']
//}

android {
    compileSdk 32

    defaultConfig {
        applicationId "ve.com.teeac.svgs"
        minSdk 23
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "ve.com.teeac.svgs.HiltTestRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        testOptions {
            unitTests.all {
                if (name == "testDebugUnitTest") {
                    kover {
                        binaryReportFile.set(file("$buildDir/custom/debug-report.bin"))
                        includes = ['ve.com.teeac.svgs.*']
                        excludes = [
                                '**/R.class',
                                '**/R$*.class',
                                '**/BuildConfig.*',
                                '**/Manifest*.*',
                                '**/*Test*.*',
                                'android/**/*.*',
                                "*_*Factory.java",
                                "*_ComponentTreeDeps.java",
                                "*_Factory.java",
                                "*_GeneratedInjector.java",
                                "*_HiltComponents.java",
                                "*_HiltModules.java",
                                "*_HiltModules_BindsModule.java",
                                "*_HiltModules_KeyModule.java",
                                "*_MembersInjector.java",
                                "*_ProvideFactory.java",
                                "*_SingletonC.java",
                                "*_TestComponentDataSupplier.java",
                                "Hilt_*.java",
                                "_test_*.java"
                        ]
                    }

                }
            }
        }
    }

//
//    testOptions {
//
//        animationsDisabled true
//
//        unitTests {
//            includeAndroidResources = true
//            returnDefaultValues = true
//        }
//        unitTests.all {
//            systemProperty 'robolectric.enabledSdks', '32'
//            jvmArgs '-noverify'
//        }
//    }


    buildTypes {
//        debug {
//            debuggable true
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            testCoverageEnabled true
//        }
        release {
            minifyEnabled false
//            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    afterEvaluate {
        mergeDebugResources.mustRunAfter(processDebugGoogleServices)
        mergeReleaseResources.mustRunAfter(processReleaseGoogleServices)
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

kapt {
    correctErrorTypes true
}

hilt {
    enableAggregatingTask = true
}

dependencies {

    //androidx
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.compose.ui:ui:$ui_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-compose:$navigation_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation "androidx.core:core-splashscreen:$splash_version"

    //compose
    implementation "androidx.compose.foundation:foundation:$fundation_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"

    //hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation "androidx.hilt:hilt-navigation-compose:$hilt_navigation_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    //google services
    implementation 'com.google.android.gms:play-services-auth:20.1.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.6.1-native-mt'
    implementation platform("com.google.firebase:firebase-bom:$firebase_version")
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'

    //log
    implementation 'com.jakewharton.timber:timber:5.0.1'

    //unit test
    testImplementation 'junit:junit:4.13.2'
    testImplementation "androidx.test:core:$androidXTestVersion"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    //Roboelectric compose
//    testImplementation 'org.robolectric:robolectric:4.8-alpha-1'
//    testImplementation 'androidx.compose.ui:ui-test-junit4:1.1.1'
//    debugImplementation 'androidx.compose.ui:ui-test-manifest:1.1.1'
    // For Robolectric tests.
//    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    //implementation test
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.navigation:navigation-testing:$navigation_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    //test compose
    androidTestImplementation("androidx.compose.ui:ui-test-junit4:$compose_version")
    debugImplementation("androidx.compose.ui:ui-test-manifest:$compose_version")
    // For instrumented tests hilt.
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"


}

//configurations.all{
//    resolutionStrategy {
//        eachDependency { details ->
//            if ('org.jacoco' == details.requested.group) {
//                details.useVersion "0.8.8"
//            }
//        }
//    }
//}